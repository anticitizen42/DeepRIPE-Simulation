#!/usr/bin/env python3
"""
drivers/read_diagnostics.py
Version 1.1

This script loads the diagnostics file generated by the massenergy_simulation module
("data/massenergy_diagnostics.npy"), inspects and prints the contents, and plots several
diagnostic trends over time (e.g., peak spectral energy, mean gradient, and autocorrelation length).

Usage:
    python -m drivers.read_diagnostics
"""

import numpy as np
import matplotlib.pyplot as plt
import os

def load_diagnostics(filename="data/massenergy_diagnostics.npy"):
    if not os.path.exists(filename):
        print(f"File '{filename}' does not exist.")
        return None
    diagnostics = np.load(filename, allow_pickle=True)
    return diagnostics

def print_diagnostics(diagnostics):
    print("\nLoaded Diagnostics:")
    for entry in diagnostics:
        print(f"Time: {entry.get('time', 'N/A')}")
        for key, value in entry.items():
            if key != 'time':
                print(f"  {key}: {value}")
        print("-" * 40)

def plot_diagnostic_over_time(diagnostics, diag_key, ylabel, title):
    times = [entry.get('time', np.nan) for entry in diagnostics]
    values = [entry.get(diag_key, np.nan) for entry in diagnostics]
    
    plt.figure(figsize=(8, 4))
    plt.plot(times, values, marker='o', linestyle='-')
    plt.xlabel("Time")
    plt.ylabel(ylabel)
    plt.title(title)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

def inspect_diagnostics_structure(diagnostics):
    if diagnostics is None:
        return
    print("Diagnostics type:", type(diagnostics))
    if isinstance(diagnostics, np.ndarray):
        print("Array shape:", diagnostics.shape)
        if diagnostics.size > 0:
            first_entry = diagnostics.flat[0]
            print("Keys in first entry:", list(first_entry.keys()))
    else:
        print("Diagnostics content:", diagnostics)

def main():
    filename = "data/massenergy_diagnostics.npy"
    diagnostics = load_diagnostics(filename)
    if diagnostics is None:
        return
    
    print("Inspecting diagnostics structure:")
    inspect_diagnostics_structure(diagnostics)
    
    print("\nPrinting diagnostics:")
    print_diagnostics(diagnostics)
    
    # Plot various diagnostics over time.
    plot_diagnostic_over_time(diagnostics, 'peak_spectral_energy', "Peak Spectral Energy",
                              "Peak Spectral Energy Evolution")
    plot_diagnostic_over_time(diagnostics, 'mean_gradient', "Mean Gradient",
                              "Mean Gradient Evolution")
    plot_diagnostic_over_time(diagnostics, 'autocorrelation_length', "Autocorrelation Length",
                              "Autocorrelation Length Evolution")
    
if __name__ == "__main__":
    main()
